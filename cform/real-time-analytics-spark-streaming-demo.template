{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "(SO0016) - RealTime-Analytics with Spark Streaming.",
  "Mappings": {
    "AWSInstanceType2Arch": {
      "c1.medium": {
        "Arch": "PV64"
      },
      "c1.xlarge": {
        "Arch": "PV64"
      },
      "c3.2xlarge": {
        "Arch": "HVM64"
      },
      "c3.4xlarge": {
        "Arch": "HVM64"
      },
      "c3.8xlarge": {
        "Arch": "HVM64"
      },
      "c3.large": {
        "Arch": "HVM64"
      },
      "c3.xlarge": {
        "Arch": "HVM64"
      },
      "cc2.8xlarge": {
        "Arch": "HVM64"
      },
      "cr1.8xlarge": {
        "Arch": "HVM64"
      },
      "g2.2xlarge": {
        "Arch": "HVMG2"
      },
      "hi1.4xlarge": {
        "Arch": "HVM64"
      },
      "hs1.8xlarge": {
        "Arch": "HVM64"
      },
      "i2.2xlarge": {
        "Arch": "HVM64"
      },
      "i2.4xlarge": {
        "Arch": "HVM64"
      },
      "i2.8xlarge": {
        "Arch": "HVM64"
      },
      "i2.xlarge": {
        "Arch": "HVM64"
      },
      "m1.large": {
        "Arch": "PV64"
      },
      "m1.medium": {
        "Arch": "PV64"
      },
      "m1.small": {
        "Arch": "PV64"
      },
      "m1.xlarge": {
        "Arch": "PV64"
      },
      "m2.2xlarge": {
        "Arch": "PV64"
      },
      "m2.4xlarge": {
        "Arch": "PV64"
      },
      "m2.xlarge": {
        "Arch": "PV64"
      },
      "m3.2xlarge": {
        "Arch": "HVM64"
      },
      "m3.large": {
        "Arch": "HVM64"
      },
      "m3.medium": {
        "Arch": "HVM64"
      },
      "m3.xlarge": {
        "Arch": "HVM64"
      },
      "m4.10xlarge": {
        "Arch": "HVM64"
      },
      "m4.2xlarge": {
        "Arch": "HVM64"
      },
      "m4.4xlarge": {
        "Arch": "HVM64"
      },
      "m4.large": {
        "Arch": "HVM64"
      },
      "m4.xlarge": {
        "Arch": "HVM64"
      },
      "r3.2xlarge": {
        "Arch": "HVM64"
      },
      "r3.4xlarge": {
        "Arch": "HVM64"
      },
      "r3.8xlarge": {
        "Arch": "HVM64"
      },
      "r3.large": {
        "Arch": "HVM64"
      },
      "r3.xlarge": {
        "Arch": "HVM64"
      },
      "t1.micro": {
        "Arch": "PV64"
      },
      "t2.medium": {
        "Arch": "HVM64"
      },
      "t2.micro": {
        "Arch": "HVM64"
      },
      "t2.small": {
        "Arch": "HVM64"
      }
    },
    "AWSRegionArch2AMI": {
      "ap-northeast-1": {
        "HVM64": "ami-35072834",
        "HVMG2": "ami-5dd1ff5c",
        "PV64": "ami-21072820"
      },
      "ap-southeast-1": {
        "HVM64": "ami-d6e1c584",
        "HVMG2": "ami-fabe9aa8",
        "PV64": "ami-20e1c572"
      },
      "ap-southeast-2": {
        "HVM64": "ami-fd4724c7",
        "HVMG2": "ami-e98ae9d3",
        "PV64": "ami-8b4724b1"
      },
      "cn-north-1": {
        "HVM64": "ami-ac57c595",
        "HVMG2": "NOT_SUPPORTED",
        "PV64": "ami-a857c591"
      },
      "eu-central-1": {
        "HVM64": "ami-b43503a9",
        "HVMG2": "ami-b03503ad",
        "PV64": "ami-a03503bd"
      },
      "eu-west-1": {
        "HVM64": "ami-748e2903",
        "HVMG2": "ami-00913777",
        "PV64": "ami-aa8f28dd"
      },
      "sa-east-1": {
        "HVM64": "ami-956cc688",
        "HVMG2": "NOT_SUPPORTED",
        "PV64": "ami-9d6cc680"
      },
      "us-east-1": {
        "HVM64": "ami-08842d60",
        "HVMG2": "ami-3a329952",
        "PV64": "ami-50842d38"
      },
      "us-west-1": {
        "HVM64": "ami-cfa8a18a",
        "HVMG2": "ami-331b1376",
        "PV64": "ami-c7a8a182"
      },
      "us-west-2": {
        "HVM64": "ami-8786c6b7",
        "HVMG2": "ami-47296a77",
        "PV64": "ami-af86c69f"
      }
    }
  },
  "Parameters": {
    "AvailabilityZones": {
      "Description": "List of Availability Zones to use for the subnets in the VPC. Note: The logical order is preserved.",
      "Type": "List<AWS::EC2::AvailabilityZone::Name>"
    },
    "KeyPairName": {
      "Description": "Public/private key pairs allow you to securely connect to your Bastion instance after it launches.",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "Must be the name of an existing EC2 KeyPair.",
      "MinLength": "3",
      "MaxLength": "41"
    },
    "NumberOfAZs": {
      "Default": "2",
      "Description": "Number of Availability Zones to use in the VPC. This must match your selections in the list of Availability Zones parameter.",
      "Type": "String"
    },
    "PrivateSubnet1ACIDR": {
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
      "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
      "Default": "10.0.0.0/19",
      "Description": "CIDR block for private subnet 1A located in Availability Zone 1",
      "Type": "String"
    },
    "PrivateSubnet2ACIDR": {
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
      "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
      "Default": "10.0.32.0/19",
      "Description": "CIDR block for private subnet 2A located in Availability Zone 2",
      "Type": "String"
    },
    "PublicSubnet1CIDR": {
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
      "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
      "Default": "10.0.128.0/20",
      "Description": "CIDR block for the public DMZ subnet 1 located in Availability Zone 1",
      "Type": "String"
    },
    "PublicSubnet2CIDR": {
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
      "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
      "Default": "10.0.144.0/20",
      "Description": "CIDR block for the public DMZ subnet 2 located in Availability Zone 2",
      "Type": "String"
    },
    "VPCCIDR": {
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
      "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
      "Default": "10.0.0.0/16",
      "Description": "CIDR block for the VPC",
      "Type": "String"
    },
    "ArtifactBucket": {
      "Type": "String",
      "Default": "",
      "Description": "Location of all config Artifacts"
    },
    "KinesisStream": {
      "Type": "String",
      "Default": "myStream",
      "Description": "Enter the Kinesis Stream name where the Producer Application events is to be published."
    },
    "ShardCount": {
      "Type": "String",
      "Default": "2",
      "Description": "Enter the Kinesis Stream Shard count."
    },
    "SubmitMode": {
      "Description": "Spark Demo Application",
      "Type": "String",
      "Default": "DemoApp"
    },
    "RemoteAccessCIDR": {
      "Description": "The IP address range that can be used to SSH to the EC2 instances.",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "Master": {
      "AllowedValues": [
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "c1.medium",
        "c1.xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "g2.2xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type.",
      "Default": "r3.xlarge",
      "Description": "EC2 instance type",
      "Type": "String"
    },
    "Core": {
      "AllowedValues": [
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "c1.medium",
        "c1.xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "g2.2xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type.",
      "Default": "r3.xlarge",
      "Description": "EC2 instance type",
      "Type": "String"
    },
    "SendAnonymousData": {
      "Description": "Send anonymous data to AWS",
      "Type": "String",
      "Default": "Yes",
      "AllowedValues": [
        "Yes",
        "No"
      ]
    }
  },
  "Conditions": {
    "AnonymousDatatoAWS": {
      "Fn::Equals": [
        {
          "Ref": "SendAnonymousData"
        },
        "Yes"
      ]
    },
    "DeploySampleApp": {
      "Fn::Equals": [
        {
          "Ref": "SubmitMode"
        },
        "DemoApp"
      ]
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [{
        "Label": {
          "default": "Availability Zone Configuration"
        },
        "Parameters": [
          "AvailabilityZones",
          "NumberOfAZs"
        ]
      },{
        "Label": {
          "default": "Network Configuration"
        },
        "Parameters": [
          "VPCCIDR",
          "PrivateSubnet1ACIDR",
          "PrivateSubnet2ACIDR",
          "PublicSubnet1CIDR",
          "PublicSubnet2CIDR"
        ]
      },{
          "Label": {
            "default": "Amazon EC2 Configuration"
          },
          "Parameters": [
            "KeyPairName",
            "RemoteAccessCIDR"
          ]
        },{
        "Label": {
          "default": "Kinesis"
        },
        "Parameters": ["KinesisStream", "ShardCount"]
      },{
        "Label": {
          "default": "EMR"
        },
        "Parameters": ["Master", "Core"]
      },{
        "Label": {
          "default": "Artifact Buckets"
        },
        "Parameters": ["ArtifactBucket"]
      },{
        "Label": {
          "default": "Application"
        },
        "Parameters": ["SubmitMode"]
      },{
        "Label": {
          "default": "AnonymousData"
        },
        "Parameters": ["SendAnonymousData"]
      }]
    }
  },
  "Resources": {
    "AppBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Ref": "ArtifactBucket"
        }
      }
    },
    "SparkOutputBucket": {
      "Type": "AWS::S3::Bucket",
      "Condition" : "DeploySampleApp",
      "Properties": {
        "BucketName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "ArtifactBucket"
              },
              "-output"
            ]
          ]
        }
      }
    },
    "SparkAppLogBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "ArtifactBucket"
              },
              "-log"
            ]
          ]
        }
      }
    },
    "SparkDemoAppResource": {
      "Type": "Custom::SparkDemoAppResource",
      "Version": "1.0",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SparkDemoAppLambdaFunction",
            "Arn"
          ]
        }
      }
    },
    "SparkDemoAppLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "This Lambda function executes only once to download sample demo app into Application S3 bucket",
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "",
              [
                "import json \n",
                "import urllib2 \n",
                "import os \n",
                "import zipfile \n",
                "import cfnresponse \n",
                "import boto3 \n",
                "from botocore.client import Config \n",
                "print('Loading function') \n",
                "def handler(event, context): \n",
                "    if event['RequestType'] == 'Create' or event['RequestType'] == 'Update': \n",
                "        Bucket='",
                {
                  "Ref": "AppBucket"
                },
                "' \n",
                "        MyStackRegion='",
                {
                  "Ref": "AWS::Region"
                },
                "' \n",
                "        try: \n",
                "            s3 = boto3.resource('s3', region_name=MyStackRegion, config=Config(signature_version='s3v4')) \n",
                "            copy_source={'Bucket':'solutions-reference','Key':'realtime-analytics-spark-streaming/v1/KinesisSparkStreamingV2.jar'} \n",
                "            copy_source1={'Bucket':'solutions-reference','Key':'realtime-analytics-spark-streaming/v1/_KinesisSparkStreaming.json'} \n",
                "            copy_source2={'Bucket':'solutions-reference','Key':'realtime-analytics-spark-streaming/v1/KinesisProducer.jar'} \n",
                "            copy_source3={'Bucket':'solutions-reference','Key':'realtime-analytics-spark-streaming/v1/zeppelin_config.sh'} \n",
                "            copy_source4={'Bucket':'solutions-reference','Key':'realtime-analytics-spark-streaming/v1/spark_submit.sh'} \n",
                "            s3.meta.client.copy(copy_source, Bucket, 'KinesisSparkStreamingV2.jar') \n",
                "            s3.meta.client.copy(copy_source1, Bucket, '_KinesisSparkStreaming.json') \n",
                "            s3.meta.client.copy(copy_source2, Bucket, 'KinesisProducer.jar') \n",
                "            s3.meta.client.copy(copy_source3, Bucket, 'zeppelin_config.sh') \n",
                "            s3.meta.client.copy(copy_source4, Bucket, 'spark_submit.sh') \n",
                "        except Exception as e: \n",
                "            print(e) \n",
                "        responseData={'fileKey':'KinesisSparkStreamingV2.jar'} \n",
                "        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData) \n",
                "    elif event['RequestType'] == 'Delete': \n",
                "        print(\"CustomResourceDelete\") \n",
                "        responseData={} \n",
                "        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData) \n",
                "    else: \n",
                "        responseData={} \n",
                "        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData) \n"
              ]
            ]
          }
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "AppLambdaExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "python2.7",
        "Timeout": 300
      }
    },
    "AppLambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "DemoAppLambda",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "s3:PutObject*",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "AppBucket"
                          }
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "AppBucket"
                          },
                          "/*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": "s3:GetObject",
                  "Resource": "arn:aws:s3:::solutions-reference/realtime-analytics-spark-streaming/*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:logs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":log-group:/aws/lambda/*"
                      ]
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "VPCStackQ": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "AvailabilityZones": {"Fn::Join" : [ ",", { "Ref" : "AvailabilityZones" }] },
          "KeyPairName": {
            "Ref": "KeyPairName"
          },
          "NumberOfAZs": {
            "Ref": "NumberOfAZs"
          },
          "PrivateSubnet1ACIDR": {
            "Ref": "PrivateSubnet1ACIDR"
          },
          "PrivateSubnet2ACIDR": {
            "Ref": "PrivateSubnet2ACIDR"
          },
          "PublicSubnet1CIDR": {
            "Ref": "PublicSubnet1CIDR"
          },
          "PublicSubnet2CIDR": {
            "Ref": "PublicSubnet2CIDR"
          },
          "VPCCIDR": {
            "Ref": "VPCCIDR"
          },
          "NATInstanceType": "t2.medium",
          "CreateAdditionalPrivateSubnets": "false"
        },
        "TemplateURL": "https://aws-quickstart.s3.amazonaws.com/quickstart-aws-vpc/templates/aws-vpc.template"
      }
    },
    "BastionSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable incoming SSH access",
        "VpcId": {
          "Fn::GetAtt": [
            "VPCStackQ",
            "Outputs.VPCID"
          ]
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "RemoteAccessCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Fn::GetAtt": [
                "VPCStackQ",
                "Outputs.VPCCIDR"
              ]
            }
          }
        ],
        "Tags": [{
          "Key": "Name",
          "Value": "BastionSecurityGroup"
        }]
      }
    },
    "BastionHost": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": "t2.medium",
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "ImageId": {
          "Fn::FindInMap": ["AWSRegionArch2AMI", {
            "Ref": "AWS::Region"
          }, {
            "Fn::FindInMap": ["AWSInstanceType2Arch", "t2.medium", "Arch"]
          }]
        },
        "NetworkInterfaces": [{
          "GroupSet": [{
            "Ref": "BastionSecurityGroup"
          }],
          "AssociatePublicIpAddress": "true",
          "DeviceIndex": "0",
          "DeleteOnTermination": "true",
          "SubnetId": {
            "Fn::GetAtt": [
              "VPCStackQ",
              "Outputs.PublicSubnet1ID"
            ]
          }
        }],
        "Tags": [{
          "Key": "Name",
          "Value": "Bastion Host"
        }]
      }
    },
    "PrivateSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow access from vpc cidr",
        "VpcId": {
          "Fn::GetAtt": [
            "VPCStackQ",
            "Outputs.VPCID"
          ]
        },
        "SecurityGroupIngress": [{
          "IpProtocol": "tcp",
          "FromPort": "22",
          "ToPort": "22",
          "SourceSecurityGroupId" : {
            "Ref": "BastionSecurityGroup"
          }
        }],
        "Tags": [{
          "Key": "Name",
          "Value": "PrivateSecurityGroup"
        }]
      }
    },
    "InternalTrafficSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Internal Security Group for Administration and PortForwarding",
        "VpcId": {
          "Fn::GetAtt": [
            "VPCStackQ",
            "Outputs.VPCID"
          ]
        },
        "SecurityGroupIngress": [{
          "IpProtocol": "tcp",
          "FromPort": "0",
          "ToPort": "65535",
          "SourceSecurityGroupId" : {
            "Ref": "BastionSecurityGroup"
          }
        }],
        "Tags": [{
          "Key": "Name",
          "Value": "InternalTrafficSecurityGroup"
        }]
      }
    },
    "BastionRecoveryAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Trigger a recovery when instance status check fails for 15 consecutive minutes.",
        "Namespace": "AWS/EC2" ,
        "MetricName": "StatusCheckFailed_System",
        "Statistic": "Minimum",
        "Period": "60",
        "EvaluationPeriods": "15",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "0",
        "AlarmActions": [ {"Fn::Join" : ["", ["arn:aws:automate:", { "Ref" : "AWS::Region" }, ":ec2:recover" ]]} ],
        "Dimensions": [{"Name": "InstanceId","Value": {"Ref": "BastionHost"}}]
      }
    },
    "ApplicationBucketPolicy" : {
      "Type" : "AWS::S3::BucketPolicy",
      "Properties" : {
        "Bucket" : {"Ref" : "AppBucket"},
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Id": "Policy3445674452340",
          "Statement": [
            {
              "Sid": "Stmt2445373452640",
              "Effect": "Allow",
              "Principal": "*",
              "Action": "s3:*",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "AppBucket"
                    },
                    "/*"
                  ]
                ]
              },
              "Condition": {
                "StringEquals": {
                  "aws:sourceVpc": {
                    "Fn::GetAtt": [
                      "VPCStackQ",
                      "Outputs.VPCID"
                    ]
                  }
                }
              }
            }
          ]
        }
      },
      "DependsOn" : "AppBucket"
    },
    "OutputBucketPolicy" : {
      "Type" : "AWS::S3::BucketPolicy",
      "Condition" : "DeploySampleApp",
      "Properties" : {
        "Bucket" : {"Ref" : "SparkOutputBucket"},
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Id": "Policy3445674452340",
          "Statement": [
            {
              "Sid": "Stmt2445373452640",
              "Effect": "Allow",
              "Principal": "*",
              "Action": "s3:*",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "SparkOutputBucket"
                    },
                    "/*"
                  ]
                ]
              },
              "Condition": {
                "StringEquals": {
                  "aws:sourceVpc": {
                    "Fn::GetAtt": [
                      "VPCStackQ",
                      "Outputs.VPCID"
                    ]
                  }
                }
              }
            }
          ]
        }
      }
    },
    "LogBucketPolicy" : {
      "Type" : "AWS::S3::BucketPolicy",
      "Properties" : {
        "Bucket" : {"Ref" : "SparkAppLogBucket"},
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Id": "Policy3445674452340",
          "Statement": [
            {
              "Sid": "Stmt2445373452640",
              "Effect": "Allow",
              "Principal": "*",
              "Action": "s3:*",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "SparkAppLogBucket"
                    },
                    "/*"
                  ]
                ]
              },
              "Condition": {
                "StringEquals": {
                  "aws:sourceVpc": {
                    "Fn::GetAtt": [
                      "VPCStackQ",
                      "Outputs.VPCID"
                    ]
                  }
                }
              }
            }
          ]
        }
      },
      "DependsOn" : "SparkAppLogBucket"
    },
    "KinesisStream1": {
      "Type": "AWS::Kinesis::Stream",
      "Properties": {
        "Name": {
          "Ref": "KinesisStream"
        },
        "ShardCount": {
          "Ref": "ShardCount"
        }
      }
    },
    "EMRInstanceProfile": {
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "EMRJobFlowRole"
          }
        ]
      },
      "Type": "AWS::IAM::InstanceProfile"
    },
    "EMRJobFlowRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              }
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceforEC2Role"
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "EMRServiceRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "elasticmapreduce.amazonaws.com"
                ]
              }
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole"
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "EMRCluster": {
      "Properties": {
        "Applications": [
          {
            "Name": "Hadoop"
          },
          {
            "Name": "Hive"
          },
          {
            "Name": "Spark"
          },
          {
            "Name": "Zeppelin"
          }
        ],
        "Instances": {
          "AdditionalMasterSecurityGroups": [
            {
              "Ref" : "InternalTrafficSecurityGroup"
            }
          ],
          "CoreInstanceGroup": {
            "InstanceCount": "2",
            "InstanceType": {
              "Ref": "Core"
            },
            "Market": "ON_DEMAND",
            "Name": "Core Instance"
          },
          "Ec2KeyName": {
            "Ref": "KeyPairName"
          },
          "Ec2SubnetId": {
            "Fn::GetAtt": [
              "VPCStackQ",
              "Outputs.PrivateSubnet1AID"
            ]
          },
          "MasterInstanceGroup": {
            "InstanceCount": "1",
            "InstanceType": {
              "Ref": "Master"
            },
            "Market": "ON_DEMAND",
            "Name": "Master Instance"
          }
        },
        "LogUri": {
          "Fn::Join": [
            "",
            [
              "s3://",
              {
                "Ref": "SparkAppLogBucket"
              }
            ]
          ]
        },
        "JobFlowRole": {
          "Ref": "EMRInstanceProfile"
        },
        "Name": "EMR Cloud Cluster",
        "ReleaseLabel": "emr-5.1.0",
        "ServiceRole": {
          "Ref": "EMRServiceRole"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "EMR Cluster - Kinesis"
          }
        ],
        "VisibleToAllUsers": "true",
        "Configurations": [
          {
            "Classification": "zeppelin-env",
            "Configurations": [
              {
                "Classification": "export",
                "Configurations": [],
                "ConfigurationProperties": {
                  "CLASSPATH": ":/var/lib/zeppelin/.ivy2/jars/*:/usr/lib/hadoop-lzo/lib/*:/usr/lib/hadoop/hadoop-aws.jar:/usr/share/aws/aws-java-sdk/*:/usr/share/aws/emr/emrfs/conf:/usr/share/aws/emr/emrfs/lib/*:/usr/share/aws/emr/emrfs/auxlib/*",
                  "SPARK_SUBMIT_OPTIONS": {
                    "Fn::Join": [
                      " ",
                      [
                        "\"$SPARK_SUBMIT_OPTIONS --packages org.apache.spark:spark-streaming-kinesis-asl_2.11:2.0.1",
                        "--conf spark.executorEnv.PYTHONPATH=/usr/lib/spark/python/lib/py4j-0.9-src.zip:/usr/lib/spark/python/:<CPS>{{PWD}}/pyspark.zip<{{PWD}}>/py4j-0.9-src.zip",
                        "--conf spark.yarn.isPython=true\""
                      ]
                    ]
                  },
                  "ZEPPELIN_NOTEBOOK_STORAGE":"org.apache.zeppelin.notebook.repo.S3NotebookRepo",
                  "ZEPPELIN_NOTEBOOK_S3_BUCKET": {
                    "Ref": "ArtifactBucket"
                  },
                  "ZEPPELIN_NOTEBOOK_S3_USER": "hadoop"
                }
              }
            ]
          }
        ]
      },
      "Type": "AWS::EMR::Cluster"
    },
    "ZeppelinConfigStep": {
      "Type": "AWS::EMR::Step",
      "Properties": {
        "ActionOnFailure": "CONTINUE",
        "HadoopJarStep": {
          "Args": [
            {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "ArtifactBucket"
                  },
                  "/zeppelin_config.sh"
                ]
              ]
            }
          ],
          "Jar": {
            "Fn::Join": [
              "",
              [
                "s3://",
                {
                  "Ref": "AWS::Region"
                },
                ".elasticmapreduce/libs/script-runner/script-runner.jar"
              ]
            ]
          }
        },
        "Name": "zeppelin_config",
        "JobFlowId": {
          "Ref": "EMRCluster"
        }
      }
    },
    "SampleAppStep": {
      "Type": "AWS::EMR::Step",
      "Condition": "DeploySampleApp",
      "Properties": {
        "ActionOnFailure": "CONTINUE",
        "HadoopJarStep": {
          "Args": [
            "spark-submit",
            "--deploy-mode",
            "cluster",
            "--class",
            "com.analytics.spark.streaming.KinesisSparkStreaming",
            "--master",
            "yarn",
            {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "ArtifactBucket"
                  },
                  "/KinesisSparkStreamingV2.jar"
                ]
              ]
            },
            "app-spark-demo",
            "myStream",
            {
              "Ref": "AWS::Region"
            },
            {
              "Ref": "SparkOutputBucket"
            }
          ],
          "Jar": "command-runner.jar",
          "MainClass": ""
        },
        "Name": "SparkStep",
        "JobFlowId": {
          "Ref": "EMRCluster"
        }
      }
    },
    "SolutionHelperRole": {
      "Type": "AWS::IAM::Role",
      "Condition": "AnonymousDatatoAWS",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "Custom_Solution_Helper_Permissions",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:logs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":log-group:/aws/lambda/*"
                      ]
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "SolutionHelper": {
      "Type": "AWS::Lambda::Function",
      "Condition": "AnonymousDatatoAWS",
      "Properties": {
        "Handler": "solution-helper.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "SolutionHelperRole",
            "Arn"
          ]
        },
        "Description": "This function creates a CloudFormation custom lambda resource that creates custom lambda functions by finding and replacing specific values from existing lambda function code.",
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "",
              [
                "solutions-",
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": "library/solution-helper/v3/solution-helper.zip"
        },
        "Runtime": "python2.7",
        "Timeout": "300"
      }
    },
    "CreateUniqueID": {
      "Type": "Custom::CreateUUID",
      "Condition": "AnonymousDatatoAWS",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SolutionHelper",
            "Arn"
          ]
        },
        "CreateUniqueID": "true"
      },
      "DependsOn": "SolutionHelper"
    },
    "AnonymousData": {
      "Type": "Custom::AnonymousData",
      "Condition": "AnonymousDatatoAWS",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SolutionHelper",
            "Arn"
          ]
        },
        "SendAnonymousData": {
          "Fn::Join": [
            "",
            [
              "{ 'Solution' : '",
              "SO00016",
              "', ",
              "'UUID' : '",
              {
                "Fn::GetAtt": [
                  "CreateUniqueID",
                  "UUID"
                ]
              },
              "', ",
              "'Data': {",
              "'Master': '1',",
              "'InstanceType': '",
              {
                "Ref": "Master"
              },
              "',",
              "'CoreInstance': '2',",
              "'InstanceType': '",
              {
                "Ref": "Core"
              },
              "',",
              "'Region': '",
              {
                "Ref": "AWS::Region"
              },
              "'",
              "}",
              "}"
            ]
          ]
        }
      },
      "DependsOn": "CreateUniqueID"
    },
    "KinesisProducerStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "DeploySampleApp",
      "Properties": {
        "Parameters": {
          "BucketName": {
            "Ref": "ArtifactBucket"
          },
          "SSHSecurityGroup": {
            "Ref": "PrivateSecurityGroup"
          },
          "ProducerSourceCode": "KinesisProducer.jar",
          "ProducerInstanceType": "c3.xlarge",
          "KeyName": {
            "Ref": "KeyPairName"
          },
          "SubnetID": {
            "Fn::GetAtt": [
              "VPCStackQ",
              "Outputs.PrivateSubnet2AID"
            ]
          }
        },
        "TemplateURL": "https://s3.amazonaws.com/solutions-reference/realtime-analytics-spark-streaming/latest/producer.template"
      },
      "DependsOn": "EMRCluster"
    }
  },
  "Outputs": {
    "ArtifactLocation": {
      "Description": "Name of the Artifact Bucket",
      "Value": {
        "Ref": "AppBucket"
      }
    },
    "SparkOutputLocation": {
      "Condition" : "DeploySampleApp",
      "Description": "Demo App, Spark Streaming Historical data output location",
      "Value": {
        "Ref": "SparkOutputBucket"
      }
    },
    "KinesisStreamName": {
      "Description": "Kinesis ARN - Default myStream",
      "Value": {
        "Fn::GetAtt": [
          "KinesisStream1",
          "Arn"
        ]
      }
    },
    "EMRClusterId": {
      "Description": "EMR Cluster",
      "Value": {
        "Ref" : "EMRCluster"
      }
    },
    "BastionHost": {
      "Description": "Bastion Host DNS Name",
      "Value": {
        "Fn::GetAtt": [
          "BastionHost",
          "PublicDnsName"
        ]
      }
    },
    "KinesisProducer": {
      "Description": "Kinesis Stream Producer EC2",
      "Condition": "DeploySampleApp",
      "Value": {
        "Fn::GetAtt": [
          "KinesisProducerStack",
          "Outputs.KinesisProducer"
        ]
      }
    }
  }
}
